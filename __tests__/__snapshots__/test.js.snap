// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`works 1`] = `
"'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

function _uop(_arg2, _operator2) {
    const primitives = {
        '+'(a) {
            return +a;
        },

        '-'(a) {
            return -a;
        },

        '++'(a) {
            return a++;
        },

        '--'(a) {
            return a--;
        },

        '~'(a) {
            return ~a;
        },

        '!'(a) {
            return !a;
        },

        'typeof'(a) {
            return typeof a;
        }

    };
    const key = Symbol.for(\`unary.\${_operator2}\`);

    const {
        result,
        hasOp
    } = _unary(_arg2, key);

    return hasOp ? result : primitives[_operator2](_arg2);
}

function _bop(_left2, _right2, _operator) {
    const primitives = {
        '+'(a, b) {
            return a + b;
        },

        '-'(a, b) {
            return a - b;
        },

        '*'(a, b) {
            return a * b;
        },

        '/'(a, b) {
            return a / b;
        },

        '^'(a, b) {
            return a ^ b;
        },

        '|'(a, b) {
            return a | b;
        },

        '&'(a, b) {
            return a & b;
        },

        '||'(a, b) {
            return a || b;
        },

        '&&'(a, b) {
            return a && b;
        },

        '=='(a, b) {
            return a == b;
        },

        '!='(a, b) {
            return a != b;
        },

        '==='(a, b) {
            return a === b;
        },

        '!=='(a, b) {
            return a !== b;
        },

        '+='(a, b) {
            return a + b;
        },

        '-='(a, b) {
            return a - b;
        },

        '*='(a, b) {
            return a * b;
        },

        '/='(a, b) {
            return a * b;
        },

        '='(a, b) {
            return b;
        }

    };
    const key = Symbol.for(\`binary.\${_operator}\`);

    const {
        result,
        hasOp
    } = _binary(_left2, _right2, key);

    return hasOp ? result : primitives[_operator](_left2, _right2);
}

function _unary(_arg, _key2) {
    if (typeof _arg !== undefined) {
        var proto = Object.getPrototypeOf(_arg);
        var op = proto.constructor[_key2];

        if (op && op.length === 1) {
            return {
                result: op.call(proto.constructor, _arg),
                hasOp: true
            };
        }
    }

    return {
        hasOp: false
    };
}

function _binary(_left, _right, _key) {
    if (typeof _left !== 'undefined') {
        var leftProto = Object.getPrototypeOf(_left);
        var leftOp = leftProto.constructor[_key];

        if (leftOp && leftOp.length === 2) {
            return {
                result: leftOp.call(leftProto.constructor, _left, _right),
                hasOp: true
            };
        }
    }

    if (typeof _right !== 'undefined') {
        var rightProto = Object.getPrototypeOf(_right);
        var rightOp = rightProto.constructor[_key];

        if (rightOp && rightOp.length === 2) {
            return {
                result: rightOp.call(rightProto.constructor, _left, _right),
                hasOp: true
            };
        }
    }

    return {
        hasOp: false
    };
}

var Vector = function () {
    function Vector(x, y) {
        _classCallCheck(this, Vector);

        thix.x = x;
        this.y = y;
    }

    _createClass(Vector, null, [{
        key: Symbol.for('unary.+'),
        value: function value(a, b) {
            return new Vector(_bop(a.x, b.x, '+'), _bop(a.y, b.y, '+'));
        }
    }]);

    return Vector;
}();

var v = new Vector(1, 1);
v = _uop(v, '--');
v = _bop(v, 12, '+');"
`;
