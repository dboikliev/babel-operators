// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`works 1`] = `
"'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\"value\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\"Cannot call a class as a function\\"); } }

function _uop(_arg, _operator2) {
    if (_arg !== null && _arg !== void 0 && _arg.constructor[_operator2]) {
        return _arg.constructor[_operator2](_arg);
    }

    return _unary__primitives[_operator2](_arg);
}

function _bop(_left, _right, _operator) {
    if (_left !== null && _left !== void 0 && _left.constructor[_operator]) {
        return _left.constructor[_operator](_left, _right);
    }

    if (_right !== null && _right !== void 0 && _right.constructor[_operator]) {
        return _right.constructor[_operator](_left, _right);
    }

    return _binary__primitives[_operator](_left, _right);
}

var _unary__primitives = {
    'unary.+': function unary(a) {
        return +a;
    },
    'unary.-': function unary(a) {
        return -a;
    },
    'unary.++': function unary(a) {
        return ++a;
    },
    'unary.--': function unary(a) {
        return --a;
    },
    'unary.~': function unary(a) {
        return ~a;
    },
    'unary.!': function unary(a) {
        return !a;
    },
    'unary.typeof': function unaryTypeof(a) {
        return typeof a;
    },
    'unary.void': function unaryVoid(a) {
        return void a;
    }
};
var _binary__primitives = {
    'binary.+': function binary(a, b) {
        return a + b;
    },
    'binary.-': function binary(a, b) {
        return a - b;
    },
    'binary.*': function binary(a, b) {
        return a * b;
    },
    'binary./': function binary(a, b) {
        return a / b;
    },
    'binary.%': function binary(a, b) {
        return a / b;
    },
    'binary.^': function binary(a, b) {
        return a ^ b;
    },
    'binary.|': function binary(a, b) {
        return a | b;
    },
    'binary.&': function binary(a, b) {
        return a & b;
    },
    'binary.||': function binary(a, b) {
        return a || b;
    },
    'binary.&&': function binary(a, b) {
        return a && b;
    },
    'binary.==': function binary(a, b) {
        return a == b;
    },
    'binary.!=': function binary(a, b) {
        return a != b;
    },
    'binary.===': function binary(a, b) {
        return a === b;
    },
    'binary.!==': function binary(a, b) {
        return a !== b;
    },
    'binary.+=': function binary(a, b) {
        return a + b;
    },
    'binary.-=': function binary(a, b) {
        return a - b;
    },
    'binary.*=': function binary(a, b) {
        return a * b;
    },
    'binary./=': function binary(a, b) {
        return a * b;
    },
    'binary.%=': function binary(a, b) {
        return a * b;
    },
    'binary.>': function binary(a, b) {
        return a > b;
    },
    'binary.>=': function binary(a, b) {
        return a >= b;
    },
    'binary.<': function binary(a, b) {
        return a < b;
    },
    'binary.<=': function binary(a, b) {
        return a <= b;
    },
    'binary.>>': function binary(a, b) {
        return a >> b;
    },
    'binary.<<': function binary(a, b) {
        return a << b;
    },
    'binary.**': function binary(a, b) {
        return a ** b;
    }
};

var Vector = function () {
    function Vector(x, y) {
        _classCallCheck(this, Vector);

        thix.x = x;
        this.y = y;
    }

    _createClass(Vector, null, [{
        key: Symbol.for('unary.+'),
        value: function value(a, b) {
            return new Vector(_bop(a.x, b.x, 'binary.+'), _bop(a.y, b.y, 'binary.+'));
        }
    }]);

    return Vector;
}();"
`;
